const Parser = require('rss-parser');
const axios = require('axios');
const { rssFeedUrl } = require('../config/keys');

class EnglishService {
  constructor() {
    this.parser = new Parser();
    this.phrases = [];
    this.lastUpdate = null;
  }

  async getDailyPhrases() {
    const now = new Date();
    if (!this.lastUpdate || now - this.lastUpdate > 24 * 60 * 60 * 1000) {
      await this.loadPhrases();
      this.lastUpdate = now;
    }
    return this.phrases.slice(0, 5);
  }

  async loadPhrases() {
    try {
      const feed = await this.parser.parseURL(rssFeedUrl);
      
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ñ—Ä–∞–∑
      const items = feed.items.slice(0, 5);
      
      this.phrases = await Promise.all(
        items.map(async (item, index) => {
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
          await this.delay(index * 1000);
          
          const word = item.title || "New Word";
          const definition = this.extractDefinition(item.description);
          const example = item.contentSnippet || "Example sentence";

          return {
            word: word,
            definition: definition,
            example: example,
            translation: await this.translateText(word),
            definitionTranslation: await this.translateText(definition),
            exampleTranslation: await this.translateText(example),
            link: item.link
          };
        })
      );

      console.log('‚úÖ 5 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ñ—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏');

    } catch (error) {
      console.error('Error loading phrases:', error);
      this.phrases = this.getFallbackPhrases();
    }
  }

  async translateText(text) {
    if (!text || text.length > 500) return text; // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    
    try {
      const response = await axios.get('https://api.mymemory.translated.net/get', {
        params: {
          q: text,
          langpair: 'en|ru'
        },
        timeout: 5000
      });
      
      return response.data.responseData.translatedText || text;
    } catch (error) {
      console.error('Translation error:', error);
      return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  extractDefinition(description) {
    const patterns = [
      /noun:\s*(.*?)(?:\.|$)/i,
      /verb:\s*(.*?)(?:\.|$)/i, 
      /adjective:\s*(.*?)(?:\.|$)/i,
      /adverb:\s*(.*?)(?:\.|$)/i
    ];

    for (const pattern of patterns) {
      const match = description.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    return description.length > 100 ? description.substring(0, 100) + '...' : description;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  getFallbackPhrases() {
    return [
      {
        word: "Serendipity",
        definition: "The occurrence of events by chance in a happy way",
        example: "Finding your favorite book was pure serendipity.",
        translation: "–°–µ—Ä–µ–Ω–¥–∏–ø–∏—Ç–∏",
        definitionTranslation: "–°–ª—É—á–∞–π–Ω–æ–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–µ",
        exampleTranslation: "–ù–∞–π—Ç–∏ –≤–∞—à—É –ª—é–±–∏–º—É—é –∫–Ω–∏–≥—É –±—ã–ª–æ —á–∏—Å—Ç–æ–π —Å–µ—Ä–µ–Ω–¥–∏–ø–∏—Ç–∏.",
        link: "https://wordsmith.org/words/serendipity.html"
      },
      {
        word: "Ephemeral", 
        definition: "Lasting for a very short time",
        example: "The beauty of cherry blossoms is ephemeral.",
        translation: "–ú–∏–º–æ–ª–µ—Ç–Ω—ã–π",
        definitionTranslation: "–î–ª—è—â–∏–π—Å—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è",
        exampleTranslation: "–ö—Ä–∞—Å–æ—Ç–∞ —Ü–≤–µ—Ç–µ–Ω–∏—è —Å–∞–∫—É—Ä—ã –º–∏–º–æ–ª–µ—Ç–Ω–∞.",
        link: "https://wordsmith.org/words/ephemeral.html"
      }
    ];
  }

  formatPhrase(phrase, index) {
    return `${index + 1}. **${phrase.word}** - _${phrase.translation}_\n` +
           `   üìñ ${phrase.definition}\n` +
           `   üá∑üá∫ ${phrase.definitionTranslation}\n` +
           `   üí¨ "${phrase.example}"\n` +
           `   üá∑üá∫ "${phrase.exampleTranslation}"\n` +
           `   üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${phrase.link})\n`;
  }
}

module.exports = new EnglishService();
