const preferenceService = require('../services/preferenceService');

class MessageHandler {
  constructor(bot) {
    this.bot = bot;
    this.setupMessageHandling();
  }

  setupMessageHandling() {
    this.bot.on('message', (msg) => this.handleMessage(msg));
  }

  async handleMessage(msg) {
    if (msg.text && !msg.text.startsWith('/')) {
      await this.handleTextMessage(msg);
    }
  }

  async handleTextMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text.toLowerCase();

    if (text.includes('–Ω—Ä–∞–≤–∏—Ç—Å—è') || text.includes('like')) {
      const prefs = preferenceService.getUserPreferences(chatId);
      if (prefs.clothingPreferences.length > 0) {
        const lastPreference = prefs.clothingPreferences[prefs.clothingPreferences.length - 1];
        await preferenceService.saveUserPreference(chatId, {
          likedOutfit: lastPreference.outfit
        });
        await this.bot.sendMessage(chatId, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π –≤—ã–±–æ—Ä –≤ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è!');
      }
    } else if (text.includes('–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è') || text.includes('dislike')) {
      await this.bot.sendMessage(chatId, 'üëå –ü–æ–Ω—è–ª, —É—á—Ç—É –≤ –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö!');
    } else if (text.length > 2) {
      await this.bot.sendMessage(chatId, `üå§Ô∏è –ò—â—É –ø–æ–≥–æ–¥—É –¥–ª—è: ${msg.text}...`);
      this.bot.emit('text', { ...msg, text: `/weather ${msg.text}` });
    }
  }
}

module.exports = MessageHandler;